<?xml version="1.0" encoding="UTF-8" ?>

<!--
 This is the Solr schema file. This file should be named "schema.xml" and
 should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default)
 or located where the classloader for the Solr webapp can find it.

 For more information, on how to customize this file, please see
 http://wiki.apache.org/solr/SchemaXml
-->

<schema name="global-search-config" version="1.5">
    <!-- attribute "name" is the name of this schema and is only used for
         display purposes. Applications should change this to reflect the nature
         of the search collection.
         version="1.2" is Solr's version number for the schema syntax and
         semantics. It should not normally be changed by applications.

         1.0: multiValued attribute did not exist, all fields are multiValued by
              nature
         1.1: multiValued attribute introduced, false by default
         1.2: omitTermFreqAndPositions attribute introduced, true by default
              except for text fields.
         1.3: removed optional field compress feature
         1.4: autoGeneratePhraseQueries attribute introduced to drive
              QueryParser behavior when a single string produces multiple
              tokens. Defaults to off for version >= 1.4
         1.5: omitNorms defaults to true for primitive field types
              (int, float, boolean, string...)
       -->

  <types>
    <!-- field type definitions. The "name" attribute is
       just a label to be used by field definitions.  The "class"
       attribute and any other attributes determine the real
       behavior of the fieldType.
         Class names starting with "solr" refer to java classes in the
       org.apache.solr.analysis package.
    -->

    <!-- The StrField type is not analyzed, but indexed/stored verbatim.
       - StrField and TextField support an optional compressThreshold which
       limits compression (if enabled in the derived fields) to values which
       exceed a certain size (in characters).
    -->
    <fieldType name="string" class="solr.StrField" sortMissingLast="true"/>

    <!-- boolean type: "true" or "false" -->
    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>
    <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
    <fieldtype name="binary" class="solr.BinaryField"/>

    <!-- The optional sortMissingLast and sortMissingFirst attributes are
         currently supported on types that are sorted internally as strings.
       - If sortMissingLast="true", then a sort on this field will cause documents
         without the field to come after documents with the field,
         regardless of the requested sort order (asc or desc).
       - If sortMissingFirst="true", then a sort on this field will cause documents
         without the field to come before documents with the field,
         regardless of the requested sort order.
       - If sortMissingLast="false" and sortMissingFirst="false" (the default),
         then default lucene sorting will be used which places docs without the
         field first in an ascending sort and last in a descending sort.
    -->

    <!-- numeric field types that can be sorted, but are not optimized for range queries -->
    <fieldType name="integer" class="solr.IntPointField" docValues="true"/>
    <fieldType name="float" class="solr.FloatPointField" docValues="true"/>
    <fieldType name="long" class="solr.LongPointField" docValues="true"/>
    <fieldType name="double" class="solr.DoublePointField" docValues="true"/>

    <!--
      Note:
      These should only be used for compatibility with existing indexes (created with older Solr versions)
      or if "sortMissingFirst" or "sortMissingLast" functionality is needed. Use Trie based fields instead.

      Numeric field types that manipulate the value into
      a string value that isn't human-readable in its internal form,
      but with a lexicographic ordering the same as the numeric ordering,
      so that range queries work correctly.
    -->
    <fieldType name="sint" class="solr.IntPointField" sortMissingLast="true"/>
    <fieldType name="sfloat" class="solr.FloatPointField" sortMissingLast="true"/>
    <fieldType name="slong" class="solr.LongPointField" sortMissingLast="true"/>
    <fieldType name="sdouble" class="solr.DoublePointField" sortMissingLast="true"/>

    <!--
     Numeric field types that index each value at various levels of precision
     to accelerate range queries when the number of values between the range
     endpoints is large. See the javadoc for NumericRangeQuery for internal
     implementation details.

     Smaller precisionStep values (specified in bits) will lead to more tokens
     indexed per value, slightly larger index size, and faster range queries.
     A precisionStep of 0 disables indexing at different precision levels.
    -->

    <!--
     The ExternalFileField type gets values from an external file instead of the
     index. This is useful for data such as rankings that might change frequently
     and require different update frequencies than the documents they are
     associated with.
    -->
    <fieldType name="file" keyField="id" defVal="1" stored="false" indexed="false" class="solr.ExternalFileField"/>

    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
         is a more restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime
         The trailing "Z" designates UTC time and is mandatory.
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
         All other components are mandatory.

         Expressions can also be used to denote calculations that should be
         performed relative to "NOW" to determine the value, ie...

               NOW/HOUR
                  ... Round to the start of the current hour
               NOW-1DAY
                  ... Exactly 1 day prior to now
               NOW/DAY+6MONTHS+3DAYS
                  ... 6 months and 3 days in the future from the start of
                      the current day

         Consult the TrieDateField javadocs for more information.

         Note: For faster range queries, consider the tdate type
      -->
    <fieldType name="date" class="solr.DatePointField" docValues="true"/>

    <fieldType name="tdate" class="solr.DatePointField" docValues="true"/>

    <!-- solr.TextField allows the specification of custom text analyzers
         specified as a tokenizer and a list of token filters. Different
         analyzers may be specified for indexing and querying.

         The optional positionIncrementGap puts space between multiple fields of
         this type on the same document, with the purpose of preventing false phrase
         matching across fields.

         For more info on customizing your analyzer chain, please see
         http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
     -->

    <!-- One can also specify an existing Analyzer class that has a
         default constructor via the class attribute on the analyzer element
    <fieldType name="text_greek" class="solr.TextField">
      <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
    </fieldType>
    -->

    <!-- A text field that only splits on whitespace for exact matching of words -->
    <fieldType name="text_ws" class="solr.TextField" omitNorms="true" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- A text field with defaults appropriate for English: it tokenizes with StandardTokenizer,
         removes English stop words (stopwords.txt), down cases, protects words from protwords.txt, and
         finally applies Porter's stemming.  The query time analyzer also applies synonyms from synonyms.txt. -->
    <fieldType name="text" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.StandardTokenizerFactory"/>       
        <!-- Case insensitive stop word removal.
        -->

        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="stopwords.txt"
            />
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EnglishPossessiveFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
        <filter class="solr.EnglishMinimalStemFilterFactory"/>
	      -->
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="stopwords.txt"
        />
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EnglishPossessiveFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
        <filter class="solr.EnglishMinimalStemFilterFactory"/>
	      -->
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- A general text field that has reasonable, generic
         cross-language defaults: it tokenizes with StandardTokenizer,
	       removes stop words from case-insensitive "stopwords.txt"
	       (empty by default), and down cases.  At query time only, it
	       also applies synonyms.
	  -->
    <fieldType name="text_und" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
        <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- Edge N gram type - for example for matching against queries with results
        KeywordTokenizer leaves input string intact as a single term.
        see: http://www.lucidimagination.com/blog/2009/09/08/auto-suggest-from-popular-queries-using-edgengrams/
      -->
    <fieldType name="edge_n2_kw_text" class="solr.TextField" omitNorms="true" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EdgeNGramFilterFactory" minGramSize="2" maxGramSize="25" />
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>
    <!--  Setup simple analysis for spell checking -->

    <fieldType name="textSpell" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory" />
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
        <filter class="solr.LengthFilterFactory" min="4" max="20" />
        <filter class="solr.LowerCaseFilterFactory" />
        <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
      </analyzer>
    </fieldType>

    <!-- This is an example of using the KeywordTokenizer along
         With various TokenFilterFactories to produce a sortable field
         that does not include some properties of the source text
      -->
    <fieldType name="sortString" class="solr.TextField" sortMissingLast="true" omitNorms="true">
      <analyzer>
        <!-- KeywordTokenizer does no actual tokenizing, so the entire
            input string is preserved as a single token
          -->
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <!-- The LowerCase TokenFilter does what you expect, which can be
            when you want your sorting to be case insensitive
          -->
        <filter class="solr.LowerCaseFilterFactory" />
        <!-- The TrimFilter removes any leading or trailing whitespace -->
        <filter class="solr.TrimFilterFactory" />
        <!-- The PatternReplaceFilter gives you the flexibility to use
            Java Regular expression to replace any sequence of characters
            matching a pattern with an arbitrary replacement string,
            which may include back refrences to portions of the orriginal
            string matched by the pattern.

            See the Java Regular Expression documentation for more
            infomation on pattern and replacement string syntax.

            http://java.sun.com/j2se/1.5.0/docs/api/java/util/regex/package-summary.html

        <filter class="solr.PatternReplaceFilterFactory"
               pattern="(^\p{Punct}+)" replacement="" replace="all"
        />
        -->
      </analyzer>
    </fieldType>

    <!-- The "RandomSortField" is not used to store or search any
         data.  You can declare fields of this type it in your schema
         to generate pseudo-random orderings of your docs for sorting
         or function purposes.  The ordering is generated based on the field
         name and the version of the index. As long as the index version
         remains unchanged, and the same field name is reused,
         the ordering of the docs will be consistent.
         If you want different psuedo-random orderings of documents,
         for the same version of the index, use a dynamicField and
         change the field name in the request.
      -->
    <fieldType name="rand" class="solr.RandomSortField" indexed="true" />

    <!-- Fulltext type for matching words based on how they sound – i.e.,
         "phonetic matching".
      -->
    <fieldType name="phonetic" class="solr.TextField" >
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
      </analyzer>
    </fieldType>

    <!-- since fields of this type are by default not stored or indexed,
         any data added to them will be ignored outright.  -->
    <fieldType name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField" />

    <!-- This point type indexes the coordinates as separate fields (subFields)
      If subFieldType is defined, it references a type, and a dynamic field
      definition is created matching *___<typename>.  Alternately, if
      subFieldSuffix is defined, that is used to create the subFields.
      Example: if subFieldType="double", then the coordinates would be
        indexed in fields myloc_0___double,myloc_1___double.
      Example: if subFieldSuffix="_d" then the coordinates would be indexed
        in fields myloc_0_d,myloc_1_d
      The subFields are an implementation detail of the fieldType, and end
      users normally should not need to know about them.
     -->
    <fieldType name="point" class="solr.PointType" dimension="2" subFieldType="double"/>

    <!-- A specialized field for geospatial search. If indexed, this fieldType must not be multivalued. -->
    <fieldType name="location" class="solr.LatLonPointSpatialField" docValues="true"/>

    <!-- A Geohash is a compact representation of a latitude longitude pair in a single field.
         See http://wiki.apache.org/solr/SpatialSearch
     -->
    <fieldtype name="geohash" class="solr.SpatialRecursivePrefixTreeFieldType" geo="true" distErrPct="0.025" maxDistErr="0.001" distanceUnits="kilometers" />/>

    <!-- Improved location type which supports advanced functionality like
         filtering by polygons or other shapes, indexing shapes, multi-valued
         fields, etc.
      -->
    <fieldType name="location_rpt" class="solr.SpatialRecursivePrefixTreeFieldType"
        geo="true" distErrPct="0.025" maxDistErr="0.001" distanceUnits="kilometers" />

    <!-- Spatial rectangle (bounding box) field. It supports most spatial predicates, and has
     special relevancy modes: score=overlapRatio|area|area2D (local-param to the query).  DocValues is recommended for
     relevancy. -->
    <fieldType name="bbox" class="solr.BBoxField"
               geo="true" distanceUnits="kilometers" numberType="_bbox_coord" />
    <fieldType name="_bbox_coord" class="solr.DoublePointField" docValues="true" stored="false"/>

    <fieldType class="solr.TextField" name="textSuggest" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LengthFilterFactory" min="2" max="12"/>
        <filter class="solr.LowerCaseFilterFactory" />
      </analyzer>
    </fieldType>

    <fieldType name="exactish" class="solr.TextField">
      <analyzer>
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer> 
    </fieldType>

    <fieldType name="_nest_path_" class="solr.NestPathField" />

  </types>

  <!-- Following is a dynamic way to include other types, added by other contrib modules -->
  <xi:include href="schema_extra_types.xml" xmlns:xi="http://www.w3.org/2001/XInclude">
    <xi:fallback></xi:fallback>
  </xi:include>

   <!-- Valid attributes for fields:
     name: mandatory - the name for the field
     type: mandatory - the name of a field type from the <types> fieldType
       section
     indexed: true if this field should be indexed (searchable or sortable)
     stored: true if this field should be retrievable
     docValues: true if this field should have doc values. Doc values are
       useful for faceting, grouping, sorting and function queries. Although not
       required, doc values will make the index faster to load, more
       NRT-friendly and more memory-efficient. They however come with some
       limitations: they are currently only supported by StrField, UUIDField
       and all Trie*Fields, and depending on the field type, they might
       require the field to be single-valued, be required or have a default
       value (check the documentation of the field type you're interested in
       for more information)
     multiValued: true if this field may contain multiple values per document
     omitNorms: (expert) set to true to omit the norms associated with
       this field (this disables length normalization and index-time
       boosting for the field, and saves some memory).  Only full-text
       fields or fields that need an index-time boost need norms.
       Norms are omitted for primitive (non-analyzed) types by default.
     termVectors: [false] set to true to store the term vector for a
       given field.
       When using MoreLikeThis, fields used for similarity should be
       stored for best performance.
     termPositions: Store position information with the term vector.
       This will increase storage costs.
     termOffsets: Store offset information with the term vector. This
       will increase storage costs.
     required: The field is required.  It will throw an error if the
       value does not exist
     default: a value that should be used if no value is specified
       when adding a document.
   -->
  <fields>

    <!-- The document id is usually derived from a site-spcific key (hash) and the
      entity type and ID like:
      Search Api :
        The format used is $document->id = $index_id . '-' . $item_id
      Apache Solr Search Integration
        The format used is $document->id = $site_hash . '/' . $entity_type . '/' . $entity->id;
    -->
    <field name="id" type="string" indexed="true" stored="true" required="true" />

    <!-- Add Solr Cloud version field as mentioned in
         http://wiki.apache.org/solr/SolrCloud#Required_Config
    -->
    <field name="_version_" type="long" indexed="true" stored="true" multiValued="false"/>

    <!-- fields for nested indexing -->
    <field name="_root_" type="string" indexed="true" stored="false" docValues="false" />
    <!-- for nested documents (relationship tracking) -->
    <field name="_nest_path_" type="_nest_path_" />
    <!--
    <field name="_nest_parent_" type="string" indexed="true" stored="true"/>
    <field name="_nest_path_" type="nest_path" />
    -->


    <!-- keywords field for customized relevancy -->
    <field name="keywords" type="text_und" indexed="true" stored="true" multiValued="true" />

    
    <!-- Catalog Integration -->
    <field name="title" type="text_und" indexed="true" stored="true" />
    <field name="author" type="text_und" indexed="true" stored="true" />
    <field name="author_raw" type="text_und" indexed="true" stored="true" />
    <field name="additional_contributor" type="text_und" indexed="true" multiValued="true" stored="true" />
    <field name="series" type="text_und" indexed="true" multiValued="true" stored="true" />
    <field name="subjects" type="string" indexed="true" stored="true" multiValued="true" docValues="true" />
    <field name="summary" type="text_und" indexed="true" stored="true" multiValued="true"/>
    <field name="material_type" type="string" indexed="true" stored="true" docValues="true" />
    <field name="target_age" type="string" indexed="true" stored="true" multiValued="true" docValues="true" />
    <field name="isbn" type="string" indexed="true" stored="true" multiValued="true"/>
    <field name="call_number" type="string" indexed="true" stored="true" />
    <field name="publishYear" type="integer" indexed="true" stored="true" docValues="true" />
    <field name="deleted" type="boolean" indexed="true" stored="true" />
    <field name="suppressed" type="boolean" indexed="true" stored="true" />
    <field name="item_locations" type="string" indexed="true" stored="true" multiValued="true"/>
    <field name="available_locations" type="string" indexed="true" stored="true" multiValued="true" docValues="true" />
    <field name="language" type="string" indexed="true" stored="true" multiValued="true" docValues="true" />
    <field name="publisher" type="string" indexed="true" stored="true" />
    <field name="available" type="boolean" indexed="true" stored="true" docValues="true" />
    <field name="author_alt" type="text_und" indexed="true" stored="true" />
    <field name="reading_level" type="string" indexed="true" stored="true" multiValued="true" docValues="true"/>
    <field name="interest_level" type="string" indexed="true" stored="true" multiValued="true" docValues="true"/>
    <field name="opac_label" type="string" indexed="true" stored="true" docValues="true"/>
    <field name="reading_level_raw" type="string" indexed="true" stored="true" multiValued="true" docValues="true"/>
    <field name="created_date" type="date" indexed="true" stored="true" docValues="true" />
    <field name="collection" type="string" indexed="true" stored="true" multiValued="true" docValues="true" />
    <field name="fiction_status" type="string" indexed="true" stored="true" docValues="true" />

    <field name="eprovider" type="string" indexed="true" stored="true" docValues="true" />
    <field name="econtrolnumber" type="string" indexed="true" stored="true" />
    <field name="eurl" type="string" indexed="true" stored="true" />
    <field name="eformat" type="string" indexed="true" stored="true" multiValued="true" docValues="true" />
    <field name="esampleurl" type="string" indexed="true" stored="true" />
    <field name="digital_avail_type" type="string" indexed="true" stored="true" docValues="true" />
    <field name="digital_copies_owned" type="integer" indexed="true" stored="true" />
    <field name="digital_copies_available" type="integer" indexed="true" stored="true" />
    <field name="digital_holds" type="integer" indexed="true" stored="true" />
    <field name="digital_cover_image" type="string" indexed="true" stored="true" />
    
    <field name="popularity" type="integer" default="500" indexed="true" stored="true" docValues="true" />

    <!-- Copyfield for exact matching -->
    <field name="exact_name" type="exactish" indexed="true" stored="false" multiValued="true"/>
    <copyField source="title" dest="exact_name" maxChars="70"/>
    <copyField source="author" dest="exact_name" maxChars="70"/>
    <copyField source="tm_title" dest="exact_name" maxChars="70"/>

    <field name="exact_title" type="exactish" indexed="true" stored="false" multiValued="true"/>
    <copyField source="title" dest="exact_title" maxChars="90"/>
    <field name="exact_author" type="exactish" indexed="true" stored="false" multiValued="true"/>
    <copyField source="author" dest="exact_author" maxChars="90"/>
    <field name="exact_site_title" type="exactish" indexed="true" stored="false" multiValued="true"/>
    <copyField source="tm_title" dest="exact_site_title" maxChars="70"/>

    <field name="suggestions" type="textSuggest" indexed="true" stored="false" multiValued="true"/>
    <copyField source="title" dest="suggestions" maxChars="100"/>
    <copyField source="author" dest="suggestions" maxChars="100" />
    <copyField source="tm_title" dest="suggestions" maxChars="100"/>

    <copyField source="title" dest="content" />
    <copyField source="subjects" dest="content" />
    <copyField source="material_type" dest="content" />
    <copyField source="target_age" dest="content" />
    <copyField source="isbn" dest="content" />
    <copyField source="call_number" dest="content" />
    <copyField source="publishYear" dest="content" />
    <copyField source="language" dest="content" />
    <copyField source="publisher" dest="content" />
    <copyField source="eformat" dest="content" />
    <copyField source="series" dest="content" />
    <copyField source="additional_contributor" dest="content" />
    <copyField source="opac_label" dest="content" />
    <copyField source="author_alt" dest="content" />
    <copyField source="author_raw" dest="content" />
    <copyField source="tm_content" dest="content" />

    <!-- Catalog Copyfields for custom sorting and faceting -->
    <field name="title_string" type="string" indexed="true" stored="false" docValues="true" />
    <copyField source="title" dest="title_string" />

    <field name="author_string" type="string" indexed="true" stored="false" docValues="true" />
    <copyField source="author" dest="author_string" />

    <field name="author_raw_string" type="string" indexed="true" stored="false" docValues="true" />
    <copyField source="author_raw" dest="author_raw_string" />   

    <field name="author_unstemmed" type="text_und" indexed="true" stored="false"/>
    <copyField source="author" dest="author_unstemmed" />

    <field name="subject_search" type="text_und" indexed="true" stored="false" multiValued="true"/>
    <copyField source="subjects" dest="subject_search" />
    <field name="exactish_subjects" type="exactish" indexed="true" stored="false" multiValued="true"/>
    <copyField source="subjects" dest="exactish_subjects" />
    <field name="subject_suggestions" type="textSuggest" indexed="true" stored="false" multiValued="true"/>
    <copyField source="subjects" dest="subject_suggestions" />

    <!-- Tags field for custom search boost -->
    <field name="tags_search" type="text_und" indexed="true" stored="false" multiValued="true"/>
    <copyField source="sm_field_tags$name" dest="tags_search" /> <!-- Event Tags -->
    <copyField source="sm_blog_tag" dest="tags_search" /> <!-- Blog Tags -->

    <!-- Search Api specific fields -->
    <!-- item_id contains the entity ID, e.g. a node's nid. -->
    <field name="item_id"  type="string" indexed="true" stored="true" />
    <!-- index_id is the machine name of the search index this entry belongs to. -->
    <field name="index_id" type="string" indexed="true" stored="true" />
  <!-- copyField commands copy one field to another at the time a document
        is added to the index.  It's used either to index the same field differently,
        or to add multiple fields to the same field for easier/faster searching.  -->
    <!-- Since sorting by ID is explicitly allowed, store item_id also in a sortable way. -->
    <copyField source="item_id" dest="sort_search_api_id" />

    <!-- Apache Solr Search Integration specific fields -->
    <!-- entity_id is the numeric object ID, e.g. Node ID, File ID -->
    <field name="entity_id"  type="long" indexed="true" stored="true" />
    <!-- entity_type is 'node', 'file', 'user', or some other Drupal object type -->
    <field name="entity_type" type="string" indexed="true" stored="true" />
    <!-- bundle is a node type, or as appropriate for other entity types -->
    <field name="bundle" type="string" indexed="true" stored="true"/>
    <field name="bundle_name" type="string" indexed="true" stored="true"/>
    <field name="site" type="string" indexed="true" stored="true"/>
    <field name="hash" type="string" indexed="true" stored="true"/>
    <field name="url" type="string" indexed="true" stored="true"/>
    <!-- label is the default field for a human-readable string for this entity (e.g. the title of a node) -->
    <field name="label" type="text_und" indexed="true" stored="true" termVectors="true" omitNorms="true"/>
    <!-- The string version of the title is used for sorting -->
    <copyField source="label" dest="sort_label"/>

    <!-- content is the default field for full text search - dump crap here -->
    <field name="content" type="text" indexed="true" stored="false" multiValued="true" />
    <field name="teaser" type="text_und" indexed="false" stored="true"/>
    <field name="path" type="string" indexed="true" stored="true"/>
    <field name="path_alias" type="text_und" indexed="true" stored="true" termVectors="true" omitNorms="true"/>

    <!-- These are the fields that correspond to a Drupal node. The beauty of having
      Lucene store title, body, type, etc., is that we retrieve them with the search
      result set and don't need to go to the database with a node_load. -->
    <field name="tid"  type="long" indexed="true" stored="true" multiValued="true"/>
    <field name="taxonomy_names" type="text_und" indexed="true" stored="false" termVectors="true" multiValued="true" omitNorms="true"/>
    <!-- Copy terms to a single field that contains all taxonomy term names -->
    <copyField source="tm_vid_*" dest="taxonomy_names"/>

    <!-- Here, default is used to create a "timestamp" field indicating
         when each document was indexed.-->
    <field name="timestamp" type="tdate" indexed="true" stored="true" default="NOW" multiValued="false"/>

    <!-- This field is used to build the spellchecker index -->
    <field name="spell" type="textSpell" indexed="true" stored="true" multiValued="true"/>

    <!-- Dynamic field definitions.  If a field name is not found, dynamicFields
         will be used if the name matches any of the patterns.
         RESTRICTION: the glob-like pattern in the name attribute must have
         a "*" only at the start or the end.
         EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
         Longer patterns will be matched first.  if equal size patterns
         both match, the first appearing in the schema will be used.  -->

    <!-- A set of fields to contain text extracted from HTML tag contents which we
         can boost at query time. -->
    <dynamicField name="tags_*" type="text_und"   indexed="true" stored="false" omitNorms="true"/>

    <!-- For 2 and 3 letter prefix dynamic fields, the 1st letter indicates the data type and
         the last letter is 's' for single valued, 'm' for multi-valued -->

    <!-- We use long for integer since 64 bit ints are now common in PHP. -->
    <dynamicField name="is_*"  type="long"    indexed="true"  stored="true" multiValued="false"/>
    <dynamicField name="im_*"  type="long"    indexed="true"  stored="true" multiValued="true"/>
    <!-- List of floats can be saved in a regular float field -->
    <dynamicField name="fs_*"  type="float"   indexed="true"  stored="true" multiValued="false"/>
    <dynamicField name="fm_*"  type="float"   indexed="true"  stored="true" multiValued="true"/>
    <!-- List of doubles can be saved in a regular double field -->
    <dynamicField name="ps_*"  type="double"   indexed="true"  stored="true" multiValued="false"/>
    <dynamicField name="pm_*"  type="double"   indexed="true"  stored="true" multiValued="true"/>
    <!-- List of booleans can be saved in a regular boolean field -->
    <dynamicField name="bm_*"  type="boolean" indexed="true"  stored="true" multiValued="true"/>
    <dynamicField name="bs_*"  type="boolean" indexed="true"  stored="true" multiValued="false"/>
    <!-- Regular text (without processing) can be stored in a string field-->
    <dynamicField name="ss_*"  type="string"  indexed="true"  stored="true" multiValued="false"/>
    <dynamicField name="sm_*"  type="string"  indexed="true"  stored="true" multiValued="true"/>
    <!-- Normal text fields are for full text - the relevance of a match depends on the length of the text -->
    <dynamicField name="ts_*"  type="text" indexed="true" stored="true" multiValued="false" />
    <dynamicField name="tm_*"  type="text" indexed="true" stored="true" multiValued="true" />
    <!-- Unstemmed text fields for full text - the relevance of a match depends on the length of the text -->
    <dynamicField name="tus_*" type="text_und" indexed="true"  stored="true" multiValued="false" termVectors="true"/>
    <dynamicField name="tum_*" type="text_und" indexed="true"  stored="true" multiValued="true" termVectors="true"/>
    <!-- These text fields omit norms - useful for extracted text like taxonomy_names -->
    <dynamicField name="tos_*" type="text_und"    indexed="true"  stored="true" multiValued="false" termVectors="true" omitNorms="true"/>
    <dynamicField name="tom_*" type="text_und"    indexed="true"  stored="true" multiValued="true" termVectors="true" omitNorms="true"/>
    <!-- Special-purpose text fields -->
    <dynamicField name="tes_*" type="edge_n2_kw_text" indexed="true" stored="true" multiValued="false" omitTermFreqAndPositions="true" />
    <dynamicField name="tem_*" type="edge_n2_kw_text" indexed="true" stored="true" multiValued="true" omitTermFreqAndPositions="true" />
    <dynamicField name="tws_*" type="text_ws" indexed="true" stored="true" multiValued="false"/>
    <dynamicField name="twm_*" type="text_ws" indexed="true" stored="true" multiValued="true"/>

    <!-- lowercase only dynamic field -->
    <dynamicField name="tsexact_*" type="exactish" indexed="true" stored="true" multiValued="false"/>

    <!-- trie dates are preferred, so give them the 2 letter prefix -->
    <dynamicField name="ds_*"  type="tdate"   indexed="true"  stored="true" multiValued="false"/>
    <dynamicField name="dm_*"  type="tdate"   indexed="true"  stored="true" multiValued="true"/>
    <!-- Binary fields can be populated using base64 encoded data. Useful e.g. for embedding
         a small image in a search result using the data URI scheme -->
    <dynamicField name="xs_*"  type="binary"  indexed="false" stored="true" multiValued="false"/>
    <dynamicField name="xm_*"  type="binary"  indexed="false" stored="true" multiValued="true"/>
    <!-- In rare cases a date rather than tdate is needed for sortMissingLast -->
    <dynamicField name="dds_*" type="date"    indexed="true"  stored="true" multiValued="false"/>
    <dynamicField name="ddm_*" type="date"    indexed="true"  stored="true" multiValued="true"/>
    <!-- Sortable fields, good for sortMissingLast support &
         We use long for integer since 64 bit ints are now common in PHP. -->
    <dynamicField name="iss_*" type="slong"   indexed="true"  stored="true" multiValued="false"/>
    <dynamicField name="ism_*" type="slong"   indexed="true"  stored="true" multiValued="true"/>
    <!-- In rare cases a sfloat rather than tfloat is needed for sortMissingLast -->
    <dynamicField name="fss_*" type="sfloat"  indexed="true"  stored="true" multiValued="false"/>
    <dynamicField name="fsm_*" type="sfloat"  indexed="true"  stored="true" multiValued="true"/>
    <dynamicField name="pss_*" type="sdouble" indexed="true"  stored="true" multiValued="false"/>
    <dynamicField name="psm_*" type="sdouble" indexed="true"  stored="true" multiValued="true"/>
    <!-- In case a 32 bit int is really needed, we provide these fields. 'h' is mnemonic for 'half word', i.e. 32 bit on 64 arch -->
    <dynamicField name="hs_*" type="integer" indexed="true"  stored="true" multiValued="false"/>
    <dynamicField name="hm_*" type="integer" indexed="true"  stored="true" multiValued="true"/>
    <dynamicField name="hss_*" type="sint"   indexed="true"  stored="true" multiValued="false"/>
    <dynamicField name="hsm_*" type="sint"   indexed="true"  stored="true" multiValued="true"/>

    <!-- Unindexed string fields that can be used to store values that won't be searchable -->
    <dynamicField name="zs_*" type="string"   indexed="false"  stored="true" multiValued="false"/>
    <dynamicField name="zm_*" type="string"   indexed="false"  stored="true" multiValued="true"/>

    <!-- Fields for location searches.
         http://wiki.apache.org/solr/SpatialSearch#geodist_-_The_distance_function -->
    <dynamicField name="points_*" type="point" indexed="true"  stored="true" multiValued="false"/>
    <dynamicField name="pointm_*" type="point" indexed="true"  stored="true" multiValued="true"/>
    <dynamicField name="locs_*" type="location" indexed="true"  stored="true" multiValued="false"/>
    <dynamicField name="locm_*" type="location" indexed="true"  stored="true" multiValued="true"/>
    <dynamicField name="geos_*" type="geohash" indexed="true"  stored="true" multiValued="false"/>
    <dynamicField name="geom_*" type="geohash" indexed="true"  stored="true" multiValued="true"/>
    <dynamicField name="bboxs_*" type="bbox" indexed="true" stored="true" multiValued="false" />
    <dynamicField name="bboxm_*" type="bbox" indexed="true" stored="true" multiValued="true" />
    <dynamicField name="rpts_*" type="location_rpt" indexed="true" stored="true" multiValued="false" />
    <dynamicField name="rptm_*" type="location_rpt" indexed="true" stored="true" multiValued="true" />

    <!-- Special fields for Solr 5 functionality. -->
    <dynamicField name="phons_*" type="phonetic" indexed="true" stored="true" multiValued="false" />
    <dynamicField name="phonm_*" type="phonetic" indexed="true" stored="true" multiValued="true" />

    <!-- External file fields -->
    <dynamicField name="eff_*" type="file"/>

    <!-- Sortable version of the dynamic string field -->
    <dynamicField name="sort_*" type="sortString" indexed="true" stored="false"/>
    <copyField source="ss_*" dest="sort_*"/>

    <!-- A random sort field -->
    <dynamicField name="random_*" type="rand" indexed="true" stored="true"/>

    <!-- This field is used to store access information (e.g. node access grants), as opposed to field data -->
    <dynamicField name="access_*" type="integer" indexed="true" stored="false" multiValued="true"/>

    <!-- The following causes solr to ignore any fields that don't already match an existing
         field name or dynamic field, rather than reporting them as an error.
         Alternately, change the type="ignored" to some other type e.g. "text" if you want
         unknown fields indexed and/or stored by default -->
    <dynamicField name="*" type="ignored" multiValued="true" />

  </fields>

  <!-- Following is a dynamic way to include other fields, added by other contrib modules -->
  <xi:include href="schema_extra_fields.xml" xmlns:xi="http://www.w3.org/2001/XInclude">
    <xi:fallback></xi:fallback>
  </xi:include>

  <!-- Field to use to determine and enforce document uniqueness.
       Unless this field is marked with required="false", it will be a required field
    -->
  <uniqueKey>id</uniqueKey>

  <!-- Similarity is the scoring routine for each document vs. a query.
       A custom Similarity or SimilarityFactory may be specified here, but
       the default is fine for most applications.
       For more info: http://wiki.apache.org/solr/SchemaXml#Similarity
    -->
  <!--
     <similarity class="com.example.solr.CustomSimilarityFactory">
       <str name="paramkey">param value</str>
     </similarity>
    -->

  <!-- DEPRECATED: The defaultSearchField is consulted by various query parsers
    when parsing a query string that isn't explicit about the field.  Machine
    (non-user) generated queries are best made explicit, or they can use the
    "df" request parameter which takes precedence over this.
    Note: Un-commenting defaultSearchField will be insufficient if your request
    handler in solrconfig.xml defines "df", which takes precedence. That would
    need to be removed.
  <defaultSearchField>content</defaultSearchField> -->

  <!-- DEPRECATED: The defaultOperator (AND|OR) is consulted by various query
    parsers when parsing a query string to determine if a clause of the query
    should be marked as required or optional, assuming the clause isn't already
    marked by some operator. The default is OR, which is generally assumed so it
    is not a good idea to change it globally here. The "q.op" request parameter
    takes precedence over this.
  <solrQueryParser defaultOperator="OR"/> -->

</schema>
